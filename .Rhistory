) {
tic("main")
ratio_of_paths <- matrix(0, nrow=number_of_labels, ncol=nrow(ref_ontology))
number_of_k_neighbors <- nrow(nn_table)
list_of_nn_table_colnames <- colnames(nn_table)
#This chunk will calculate the ratio of paths for unique label in cds_ref
ratio_of_paths <- sapply(1:nrow(ref_ontology), function(j) {
path <- ref_ontology[j, ]
#Check if the path is present in the nn_table
ratios <- sapply(1:number_of_labels, function(h) {
sum(nn_table[[list_of_nn_table_colnames[h]]] == path[[colnames(path)[h]]]) / number_of_k_neighbors
})
return(ratios)
})
toc()
return(ratio_of_paths)
}
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
nn_table_to_matrix <- function(
ref_ontology,
nn_table,
number_of_labels
) {
tic("main")
ratio_of_paths <- matrix(0, nrow=number_of_labels, ncol=nrow(ref_ontology))
number_of_k_neighbors <- nrow(nn_table)
list_of_nn_table_colnames <- colnames(nn_table)
#This chunk will calculate the ratio of paths for unique label in cds_ref
ratio_of_paths <- sapply(1:nrow(ref_ontology), function(j) {
path <- ref_ontology[j, ]
#Check if the path is present in the nn_table
ratios <- sapply(1:number_of_labels, function(h) {
sum(nn_table[[list_of_nn_table_colnames[h]]] == path[[colnames(path)[h]]]) / number_of_k_neighbors
})
return(ratios)
})
toc()
return(ratio_of_paths)
}
nn_table_to_matrix <- function(
ref_ontology,
nn_table,
number_of_labels
) {
tic("main")
number_of_k_neighbors <- nrow(nn_table)
list_of_nn_table_colnames <- colnames(nn_table)
number_of_paths <- nrow(ref_ontology)
ratio_of_paths <- matrix(0, nrow=number_of_labels, ncol=number_of_paths)
#This chunk will calculate the ratio of paths for unique label in cds_ref
ratio_of_paths <- sapply(1:number_of_paths, function(j) {
path <- ref_ontology[j, ]
#Check if the path is present in the nn_table
ratios <- sapply(1:number_of_labels, function(h) {
sum(nn_table[[list_of_nn_table_colnames[h]]] == path[[colnames(path)[h]]]) / number_of_k_neighbors
})
return(ratios)
})
toc()
return(ratio_of_paths)
}
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
measured
measured_index <- which(apply(ref_ontology_, 1, function(row) all(row == measured)))
tic()
measured_index <- which(apply(ref_ontology_, 1, function(row) all(row == measured)))
toc()
tic(); toc()
tic(); measured_index <- which(apply(ref_ontology_, 1, function(row) all(row == measured))); toc()
list(ratio_of_paths, measured_index)
z <- list(ratio_of_paths, measured_index)
z
z[[1]]
z[[2]]
nn_table_to_matrix <- function(
ref_ontology,
nn_table,
number_of_labels,
measured = NULL
) {
list_of_nn_table_colnames <- colnames(nn_table)
number_of_paths <- nrow(ref_ontology)
number_of_k_neighbors <- nrow(nn_table)
measured_index <- 0
ratio_of_paths <- matrix(0, nrow=number_of_labels, ncol=number_of_paths)
#This chunk will calculate the ratio of paths for unique label in cds_ref
ratio_of_paths <- sapply(1:number_of_paths, function(j) {
path <- ref_ontology[j, ]
if(!is.null(measured) && all(measured == path))  measured_index <- j
ratios <- sapply(1:number_of_labels, function(h) {
sum(nn_table[[list_of_nn_table_colnames[h]]] == path[[colnames(path)[h]]]) / number_of_k_neighbors
})
return(ratios)
})
return(list(ratio_of_paths, measured_index))
}
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
nn_table_to_matrix <- function(
ref_ontology,
nn_table,
number_of_labels,
measured = NULL
) {
list_of_nn_table_colnames <- colnames(nn_table)
number_of_paths <- nrow(ref_ontology)
number_of_k_neighbors <- nrow(nn_table)
measured_index <- 0
ratio_of_paths <- matrix(0, nrow=number_of_labels, ncol=number_of_paths)
#This chunk will calculate the ratio of paths for unique label in cds_ref
ratio_of_paths <- sapply(1:number_of_paths, function(j) {
path <- ref_ontology[j, ]
if(!is.null(measured) & all(measured == path))  measured_index <- j
ratios <- sapply(1:number_of_labels, function(h) {
sum(nn_table[[list_of_nn_table_colnames[h]]] == path[[colnames(path)[h]]]) / number_of_k_neighbors
})
return(ratios)
})
return(list(ratio_of_paths, measured_index))
}
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
nn_table_to_matrix <- function(
ref_ontology,
nn_table,
number_of_labels,
measured = NULL
) {
list_of_nn_table_colnames <- colnames(nn_table)
number_of_paths <- nrow(ref_ontology)
number_of_k_neighbors <- nrow(nn_table)
measured_index <- 0
ratio_of_paths <- matrix(0, nrow=number_of_labels, ncol=number_of_paths)
#This chunk will calculate the ratio of paths for unique label in cds_ref
ratio_of_paths <- sapply(1:number_of_paths, function(j) {
path <- ref_ontology[j, ]
if(!is.null(measured) && all(measured == path))  measured_index <- j
ratios <- sapply(1:number_of_labels, function(h) {
sum(nn_table[[list_of_nn_table_colnames[h]]] == path[[colnames(path)[h]]]) / number_of_k_neighbors
})
return(ratios)
})
return(list(ratio_of_paths, measured_index))
}
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
nn_table_to_matrix <- function(
ref_ontology,
nn_table,
number_of_labels,
measured = NULL
) {
list_of_nn_table_colnames <- colnames(nn_table)
number_of_paths <- nrow(ref_ontology)
number_of_k_neighbors <- nrow(nn_table)
measured_index <- 0
ratio_of_paths <- matrix(0, nrow=number_of_labels, ncol=number_of_paths)
#This chunk will calculate the ratio of paths for unique label in cds_ref
ratio_of_paths <- sapply(1:number_of_paths, function(j) {
path <- ref_ontology[j, ]
if(!is.null(measured) & all(measured == path))  measured_index <- j
ratios <- sapply(1:number_of_labels, function(h) {
sum(nn_table[[list_of_nn_table_colnames[h]]] == path[[colnames(path)[h]]]) / number_of_k_neighbors
})
return(ratios)
})
return(list(ratio_of_paths, measured_index))
}
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labelsnn_table_to_matrix <- function(
ref_ontology,
nn_table,
number_of_labels
) {
list_of_nn_table_colnames <- colnames(nn_table)
number_of_paths <- nrow(ref_ontology)
number_of_k_neighbors <- nrow(nn_table)
ratio_of_paths <- matrix(0, nrow=number_of_labels, ncol=number_of_paths)
#This chunk will calculate the ratio of paths for unique label in cds_ref
ratio_of_paths <- sapply(1:number_of_paths, function(j) {
path <- ref_ontology[j, ]
ratios <- sapply(1:number_of_labels, function(h) {
sum(nn_table[[list_of_nn_table_colnames[h]]] == path[[colnames(path)[h]]]) / number_of_k_neighbors
})
return(ratios)
})
return(ratio_of_paths)
}); toc()
nn_table_to_matrix <- function(
ref_ontology,
nn_table,
number_of_labels
) {
list_of_nn_table_colnames <- colnames(nn_table)
number_of_paths <- nrow(ref_ontology)
number_of_k_neighbors <- nrow(nn_table)
ratio_of_paths <- matrix(0, nrow=number_of_labels, ncol=number_of_paths)
#This chunk will calculate the ratio of paths for unique label in cds_ref
ratio_of_paths <- sapply(1:number_of_paths, function(j) {
path <- ref_ontology[j, ]
ratios <- sapply(1:number_of_labels, function(h) {
sum(nn_table[[list_of_nn_table_colnames[h]]] == path[[colnames(path)[h]]]) / number_of_k_neighbors
})
return(ratios)
})
return(ratio_of_paths)
}
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
source("~/Desktop/sclass_local/temp.R")
tic(); a(ref_ontology_, nn_table, number_of_labels = number_of_labels) toc();
tic(); a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
source("~/Desktop/sclass_local/temp.R")
tic(); a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
source('load_data.R')
L()
plot_cells(cds_ref, color_cells_by = cell_type_sub)
colData(cds_ref)
plot_cells(cds_ref, color_cells_by = "cell_type_sub")
plot_cells(cds_ref, color_cells_by = "cell_type_sub")
plot_cells(cds_ref, color_cells_by = "cell_type_sub")
source('load_data.R')
VD()
LD()
VD()
ref_coldata <- as.data.frame(colData(cds_ref))
nn_control_default <- list(method='annoy', metric='euclidean', n_trees=50, M=48, ef_construction=200, ef=150, grain_size=1, cores=1)
nn_control_tmp <- set_nn_control(mode=2,
nn_control=nn_control,
nn_control_default=nn_control_default,
nn_index=NULL,
k=k,
verbose=verbose)
cds_ref_temp <- cds_ref
cds_query_temp <- cds_query
colData(cds_ref_temp)[['data_set']] <- 'reference'
colData(cds_query_temp)[['data_set']] <- 'query'
cds_com <- combine_cds(list(cds_ref_temp, cds_query_temp), keep_all_genes=TRUE, cell_names_unique=TRUE, keep_reduced_dims=TRUE)
cds_com <- combine_cds(list(cds_ref_temp, cds_query_temp), keep_all_genes=TRUE, cell_names_unique=FALSE, keep_reduced_dims=TRUE)
cds_com <- load_transform_models(cds_com, directory_path=transform_models_dir)
cds_com <- preprocess_cds(cds_com)
source('load_data.R')
LD()
VD()
cds_nn <- data.frame(matrix(NA, nrow=NUMBER_OF_QUERY_CELLS, ncol=NUMBER_OF_LABELS))
ref_coldata <- as.data.frame(colData(cds_ref))
nn_control_default <- list(method='annoy', metric='euclidean', n_trees=50, M=48, ef_construction=200, ef=150, grain_size=1, cores=1)
nn_control_tmp <- set_nn_control(mode=2,
nn_control=nn_control,
nn_control_default=nn_control_default,
nn_index=NULL,
k=k,
verbose=verbose)
cds_ref_temp <- cds_ref
cds_query_temp <- cds_query
colData(cds_ref_temp)[['data_set']] <- 'reference'
colData(cds_query_temp)[['data_set']] <- 'query'
cds_com <- combine_cds(list(cds_ref_temp, cds_query_temp), keep_reduced_dims = TRUE)
cds_com <- load_transform_models(cds_com, directory_path=transform_models_dir)
cds_com <- preprocess_cds(cds_com)
unique(colnames(colData(cds_com)))
plot_cells(cds_com, color_cells_by = "Cell.type.annotation")
learn_graph(cds_com)
plot_cells(cds_com, color_cells_by = "data_set")
colData(cds_com)$data_set
any(is.any(colData(cds_com)$data_set))
any(is.na(colData(cds_com)$data_set))
plot_cells(cds_com, color_cells_by = "data_set")
plot_cells(cds_com, color_cells_by = "data_set")
plot_cells(cds_com, color_cells_by = "Cell.type.annotation")
q
q
q
q
source('load_data.R')
LD()
VD()
cds_com <- combine_cds(list(cds_ref, cds_query), keep_reduced_dims = TRUE)
cds_com <- load_transform_models(cds_com, directory_path=transform_models_dir)
cds_com <- preprocess_cds(cds_com)
plot_cells_3d(cds_com)
cds_3d <- reduce_dimension(cds_com, max_components = 3)
cds_3d <- cluster_cells(cds_3d)
cds_3d <- plot_cells_3d(cds_com)
source('load_data')
source('load_data.R')
LD()
cds_ref <- reduce_dimension(cds_ref, umap.min_dist = 0.25, umap.n_neighbors = 200)
plot_cells(cds_ref)
dim(cds_ref)
length(rownames(colData(cds_ref)))
rownames(cds_ref) <- 1:116731
rownames(colData(cds_ref)) <- 1:116731
plot_cells(cds_ref, color_cells_by = "Cell.type.annotation")
plot_cells(cds_ref, color_cells_by = "Cell.type.annotation")
cds_ref <- cds_ref[, !(colData(cds_ref)$Cell.type.annotation %in% c('T', 'Prog', 'Undifferentiated'))]
cds_ref <- reduce_dimension(cds_ref, umap.min_dist = 0.25, umap.n_neighbors = 200)
plot_cells(cds_ref, color_cells_by = "Cell.type.annotation")
source('load_data.R')
LD()
cds_ref <- reduce_dimension(cds_ref, umap.min_dist = 0.99, umap.n_neighbors = 200)
rowname(colData(cds_ref)) <- 1:dim(colData(cds_ref))[1]
rownames(colData(cds_ref)) <- 1:dim(colData(cds_ref))[1]
plot_cells(cds_ref, color_cells_by = "Cell.type.annotation")
plot_cells(cds_ref, color_cells_by = "Cell.type.annotation")
source('load_data.R')
LD()
VD()
T()
NUMBER_OF_CELLS <- nrow(query_data)
NUMBER_OF_REFERENCE_CELLS <- nrow(ref_coldata)
NUMBER_OF_QUERY_CELLS <- NUMBER_OF_CELLS - NUMBER_OF_REFERENCE_CELLS
NUMBER_OF_LABELS <- length(ref_column_names)
ref_ontology <- ref_coldata[, ref_column_names]
ref_ontology <- unique(ref_ontology)
ref_ontology <- as.data.frame(ref_ontology)
priors <- rep((1/NUMBER_OF_LABELS), NUMBER_OF_LABELS)
priors <- train_priors_on_reference(
priors,
query_search,
ref_coldata,
ref_column_names,
ref_ontology,
maxeval,
NUMBER_OF_REFERENCE_CELLS,
NUMBER_OF_LABELS
)
priors
cds_nn <- calculate_posteriors_and_label(
priors,
query_search,
ref_column_names,
ref_coldata,
ref_ontology,
NUMBER_OF_LABELS,
NUMBER_OF_QUERY_CELLS,
NUMBER_OF_REFERENCE_CELLS,
NUMBER_OF_CELLS
)
cds_nn <- check_ontology(cds_nn)
colnames(cds_nn) <- c(query_column_names, "break")
rownames(colData(cds_query)) <- 1:54277
colData(cds_query) <- cbind(colData(cds_query), cds_nn)
plot_cells(cds_query, color_cells_by="break")
plot_cells(cds_query, color_cells_by = "bay_L4")
plot_cells(cds_ref, color_cells_by = "L4")
dim(colData(cds_qry))
dim(colData(cds_ref))
rownames(colData(cds_ref)) <- 1:89429
plot_cells(cds_ref, color_cells_by = "L4")
nn_ref <- colData(cds_ref)[c("L1", "L2", "L3", "L4")]
nn_ref
nn_ref <- as.data.frame(nn_ref)
nn_ref <- check_ontology(nn_ref)
colnames(nn_ref) <- c(query_column_names, "break")
colData(cds_ref) <- cbind(colData(cds_ref), nn_ref)
plot_cells(cds_ref, color_cells_by="break")
source('load_data.R')
LD()
cds_ref <- preprocess_cds(cds_ref)
cds_ref <- reduce_dimension(cds_ref, umap.min_dist = 0.25, umap.n_neighbors = 200)
cds_ref <- reduce_dimension(cds_ref, umap.min_dist = 0.25, umap.n_neighbors = 200, build_nn_index = TRUE)
save_transform_models(cds_ref_D, 'umap_model')
save_transform_models(cds_ref, 'umap_model')
cds_qry <- load_transform_models(cds_qry, 'umap_model')
cds_qry <- preprocess_transform(cds_qry)
cds_qry <- reduce_dimension_transform(cds_qry)
VD()
transform_models_dir <- 'umap_model'
T()
NUMBER_OF_CELLS <- nrow(query_data)
NUMBER_OF_REFERENCE_CELLS <- nrow(ref_coldata)
NUMBER_OF_QUERY_CELLS <- NUMBER_OF_CELLS - NUMBER_OF_REFERENCE_CELLS
NUMBER_OF_LABELS <- length(ref_column_names)
ref_ontology <- ref_coldata[, ref_column_names]
ref_ontology <- unique(ref_ontology)
ref_ontology <- as.data.frame(ref_ontology)
priors <- rep((1/NUMBER_OF_LABELS), NUMBER_OF_LABELS)
priors <- train_priors_on_reference(
priors,
query_search,
ref_coldata,
ref_column_names,
ref_ontology,
maxeval,
NUMBER_OF_REFERENCE_CELLS,
NUMBER_OF_LABELS
)
for(i in 1:NUMBER_OF_LABELS) {
print(paste0("Prior for ", ref_column_names[i], ": ", priors[i]))
}
cds_nn <- calculate_posteriors_and_label(
priors,
query_search,
ref_column_names,
ref_coldata,
ref_ontology,
NUMBER_OF_LABELS,
NUMBER_OF_QUERY_CELLS,
NUMBER_OF_REFERENCE_CELLS,
NUMBER_OF_CELLS
)
cds_nn <- check_ontology(cds_nn)
colnames(cds_nn) <- c(query_column_names, "break")
rownames(colData(cds_query)) <- 1:54277
colData(cds_query) <- cbind(colData(cds_query), cds_nn)
plot_cells(cds_query, color_cells_by="break")
plot_cells(cds_query, color_cells_by="bay_L4")
dim(colData(cds_ref))
rownames(colData(cds_ref)) <- 1:89429
plot_cells(cds_ref, color_cells_by = "L4")
nn_ref <- colData(cds_ref)[c("L1","L2","L3","L4")]
cds_nn <- check_ontology(nn_ref)
nn_ref <- as.data.frame(nn_ref)
cds_nn <- check_ontology(nn_ref)
plot_cells(cds_ref, color_cells_by = "break")
colData(cds_query) <- cbind(colData(cds_query), cds_nn)
colnames(cds_nn) <- c(query_column_names, "break")
colData(cds_query) <- cbind(colData(cds_query), cds_nn)
colData(cds_ref) <- cbind(colData(cds_ref), cds_nn)
plot_cells(cds_ref, color_cells_by = "break")
