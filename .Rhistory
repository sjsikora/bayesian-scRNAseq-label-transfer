msg= paste0('ref_column_name \'', ref_column_names, '\' is not in the ref_col_data'))
assertthat::assert_that(length(ref_column_names) > 1,
msg = "Length of ref_column_names must be greater than 1.")
for(column_name in ref_column_names) {
assertthat::assert_that(is.character(ref_coldata[[column_name]]),
msg = paste0('ref_coldata column \'', column_name, '\' is not a character vector'))
}
if(reduction_method == 'UMAP') {
nn_control_default <- list(method='annoy', metric='euclidean', n_trees=50, M=48, ef_construction=200, ef=150, grain_size=1, cores=1)
} else {
nn_control_default <- list(method='annoy', metric='cosine', n_trees=50, M=48, ef_construction=200, ef=150, grain_size=1, cores=1)
}
nn_control_tmp <- set_nn_control(mode=2,
nn_control=nn_control,
nn_control_default=nn_control_default,
nn_index=NULL,
k=k,
verbose=verbose)
source("~/Desktop/sclass_local/bayesian_label_transfer_ontology_v4.R")
colData(cds_ref)[['data_set']] <- 'reference'
colData(cds_query[['data_set']] <- 'query'
source("~/Desktop/sclass_local/bayesian_label_transfer_ontology_v4.R")
source("~/Desktop/sclass_local/bayesian_label_transfer_ontology_v4.R")
nn_control_tmp <- set_nn_control(mode=2,
nn_control=nn_control,
nn_control_default=nn_control_default,
nn_index=NULL,
k=k,
verbose=verbose)
cds_ref_temp <- cds_ref
cds_query_temp <- cds_query
colData(cds_ref_temp)[['data_set']] <- 'reference'
colData(cds_query_temp)[['data_set']] <- 'query'
cds_com <- combine_cds(list(cds_ref_temp, cds_query_temp), keep_all_genes=TRUE, cell_names_unique=TRUE, keep_reduced_dims=TRUE)
cds_com <- preprocess_cds(cds_com)
source("~/Desktop/sclass_local/bayesian_label_transfer_ontology_v4.R")
cds_nn_index <- get_cds_nn_index(cds=cds_com, reduction_method=reduction_method, nn_control_tmp[['method']], verbose=verbose)
source('load_data.R')
L()
V()
source("~/Desktop/sclass_local/bayesian_label_transfer_ontology_v4.R")
}
colData(cds_ref)
source('load_data.R')
L()
colData(cds_ref)
nn_table_to_matrix <- function(
ref_ontology,
nn_table,
number_of_labels
) {
ratio_of_paths <- matrix(0, nrow=number_of_labels, ncol=nrow(ref_ontology))
#This chunk will calculate the ratio of paths for unique label in cds_ref
ratio_of_paths <- sapply(1:nrow(ref_ontology), function(j) {
path <- ref_ontology[j, ]
#Check if the path is present in the nn_table
is_present <- any(sapply(unique(nn_table), function(label) {label %in% path}))
if(!is_present) return(rep(0, number_of_labels))
ratios <- sapply(1:number_of_labels, function(h) {
sum(nn_table[[colnames(nn_table)[h]]] == path[[colnames(path)[h]]]) / nrow(nn_table)
})
return(ratios)
})
return(ratio_of_paths)
}
source('load_data.R')
L()
V()
T()
number_of_cells <- nrow(query_data)
number_of_reference_cells <- nrow(ref_coldata)
number_of_query_cells <- number_of_cells - number_of_reference_cells
number_of_labels <- length(ref_column_names)
ref_ontology <- ref_coldata[, ref_column_names]
ref_ontology <- unique(ref_ontology)
priors <- rep((1/number_of_labels), number_of_labels)
list_of_ref_cells_paths <- vector("list", length = number_of_reference_cells_)
priors_ <- priors
query_search_ <- query_search
ref_coldata_ <- ref_coldata
ref_column_names_ <- ref_column_names
ref_ontology_ <- ref_ontology
number_of_reference_cells_ <- number_of_reference_cells
number_of_labels_ <- number_of_labels
list_of_ref_cells_paths <- vector("list", length = number_of_reference_cells_)
vector_of_measured_index <- vector("numeric", length = number_of_reference_cells_)
current_index_in_list <- 0
i <- 1
ref_neighbors <- query_search_[['nn.idx']][i,]
nn_table <- ref_coldata_[ref_neighbors, ref_column_names_]
measured <- nn_table[1,]
nn_table <- nn_table[-1,]
devtools::install_github("jabiru/tictoc")
library(tictoc)
nn_table_to_matrix <- function(
ref_ontology,
nn_table,
number_of_labels
) {
tic("main")
ratio_of_paths <- matrix(0, nrow=number_of_labels, ncol=nrow(ref_ontology))
#This chunk will calculate the ratio of paths for unique label in cds_ref
ratio_of_paths <- sapply(1:nrow(ref_ontology), function(j) {
path <- ref_ontology[j, ]
#Check if the path is present in the nn_table
is_present <- any(sapply(unique(nn_table), function(label) {label %in% path}))
if(!is_present) return(rep(0, number_of_labels))
ratios <- sapply(1:number_of_labels, function(h) {
sum(nn_table[[colnames(nn_table)[h]]] == path[[colnames(path)[h]]]) / nrow(nn_table)
})
return(ratios)
})
toc()
return(ratio_of_paths)
}
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
nn_table_to_matrix <- function(
ref_ontology,
nn_table,
number_of_labels
) {
tic("main")
ratio_of_paths <- matrix(0, nrow=number_of_labels, ncol=nrow(ref_ontology))
#This chunk will calculate the ratio of paths for unique label in cds_ref
ratio_of_paths <- sapply(1:nrow(ref_ontology), function(j) {
path <- ref_ontology[j, ]
#Check if the path is present in the nn_table
#is_present <- any(sapply(unique(nn_table), function(label) {label %in% path}))
#if(!is_present) return(rep(0, number_of_labels))
ratios <- sapply(1:number_of_labels, function(h) {
sum(nn_table[[colnames(nn_table)[h]]] == path[[colnames(path)[h]]]) / nrow(nn_table)
})
return(ratios)
})
toc()
return(ratio_of_paths)
}
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
nn_table_to_matrix <- function(
ref_ontology,
nn_table,
number_of_labels
) {
tic("main")
ratio_of_paths <- matrix(0, nrow=number_of_labels, ncol=nrow(ref_ontology))
#This chunk will calculate the ratio of paths for unique label in cds_ref
ratio_of_paths <- sapply(1:nrow(ref_ontology), function(j) {
path <- ref_ontology[j, ]
#Check if the path is present in the nn_table
ratios <- sapply(1:number_of_labels, function(h) {
sum(nn_table[[colnames(nn_table)[h]]] == path[[colnames(path)[h]]]) / nrow(nn_table)
})
return(ratios)
})
toc()
return(ratio_of_paths)
}
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
number_of_reference_cells
nn_table_to_matrix <- function(
ref_ontology,
nn_table,
number_of_labels
) {
tic("main")
#ratio_of_paths <- matrix(0, nrow=number_of_labels, ncol=nrow(ref_ontology))
#This chunk will calculate the ratio of paths for unique label in cds_ref
ratio_of_paths <- sapply(1:nrow(ref_ontology), function(j) {
path <- ref_ontology[j, ]
#Check if the path is present in the nn_table
ratios <- sapply(1:number_of_labels, function(h) {
sum(nn_table[[colnames(nn_table)[h]]] == path[[colnames(path)[h]]]) / nrow(nn_table)
})
return(ratios)
})
toc()
return(ratio_of_paths)
}
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
nn_table_to_matrix <- function(
ref_ontology,
nn_table,
number_of_labels
) {
tic("main")
ratio_of_paths <- matrix(0, nrow=number_of_labels, ncol=nrow(ref_ontology))
number_of_k_neighbors <- nrow(nn_table)
list_of_nn_table_colnames <- colnames(nn_table)
#This chunk will calculate the ratio of paths for unique label in cds_ref
ratio_of_paths <- sapply(1:nrow(ref_ontology), function(j) {
path <- ref_ontology[j, ]
#Check if the path is present in the nn_table
ratios <- sapply(1:number_of_labels, function(h) {
sum(nn_table[[list_of_nn_table_colnames[h]]] == path[[colnames(path)[h]]]) / number_of_k_neighbors
})
return(ratios)
})
toc()
return(ratio_of_paths)
}
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
nn_table_to_matrix <- function(
ref_ontology,
nn_table,
number_of_labels
) {
tic("main")
ratio_of_paths <- matrix(0, nrow=number_of_labels, ncol=nrow(ref_ontology))
number_of_k_neighbors <- nrow(nn_table)
list_of_nn_table_colnames <- colnames(nn_table)
#This chunk will calculate the ratio of paths for unique label in cds_ref
ratio_of_paths <- sapply(1:nrow(ref_ontology), function(j) {
path <- ref_ontology[j, ]
#Check if the path is present in the nn_table
ratios <- sapply(1:number_of_labels, function(h) {
sum(nn_table[[list_of_nn_table_colnames[h]]] == path[[colnames(path)[h]]]) / number_of_k_neighbors
})
return(ratios)
})
toc()
return(ratio_of_paths)
}
nn_table_to_matrix <- function(
ref_ontology,
nn_table,
number_of_labels
) {
tic("main")
number_of_k_neighbors <- nrow(nn_table)
list_of_nn_table_colnames <- colnames(nn_table)
number_of_paths <- nrow(ref_ontology)
ratio_of_paths <- matrix(0, nrow=number_of_labels, ncol=number_of_paths)
#This chunk will calculate the ratio of paths for unique label in cds_ref
ratio_of_paths <- sapply(1:number_of_paths, function(j) {
path <- ref_ontology[j, ]
#Check if the path is present in the nn_table
ratios <- sapply(1:number_of_labels, function(h) {
sum(nn_table[[list_of_nn_table_colnames[h]]] == path[[colnames(path)[h]]]) / number_of_k_neighbors
})
return(ratios)
})
toc()
return(ratio_of_paths)
}
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels)
measured
measured_index <- which(apply(ref_ontology_, 1, function(row) all(row == measured)))
tic()
measured_index <- which(apply(ref_ontology_, 1, function(row) all(row == measured)))
toc()
tic(); toc()
tic(); measured_index <- which(apply(ref_ontology_, 1, function(row) all(row == measured))); toc()
list(ratio_of_paths, measured_index)
z <- list(ratio_of_paths, measured_index)
z
z[[1]]
z[[2]]
nn_table_to_matrix <- function(
ref_ontology,
nn_table,
number_of_labels,
measured = NULL
) {
list_of_nn_table_colnames <- colnames(nn_table)
number_of_paths <- nrow(ref_ontology)
number_of_k_neighbors <- nrow(nn_table)
measured_index <- 0
ratio_of_paths <- matrix(0, nrow=number_of_labels, ncol=number_of_paths)
#This chunk will calculate the ratio of paths for unique label in cds_ref
ratio_of_paths <- sapply(1:number_of_paths, function(j) {
path <- ref_ontology[j, ]
if(!is.null(measured) && all(measured == path))  measured_index <- j
ratios <- sapply(1:number_of_labels, function(h) {
sum(nn_table[[list_of_nn_table_colnames[h]]] == path[[colnames(path)[h]]]) / number_of_k_neighbors
})
return(ratios)
})
return(list(ratio_of_paths, measured_index))
}
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
nn_table_to_matrix <- function(
ref_ontology,
nn_table,
number_of_labels,
measured = NULL
) {
list_of_nn_table_colnames <- colnames(nn_table)
number_of_paths <- nrow(ref_ontology)
number_of_k_neighbors <- nrow(nn_table)
measured_index <- 0
ratio_of_paths <- matrix(0, nrow=number_of_labels, ncol=number_of_paths)
#This chunk will calculate the ratio of paths for unique label in cds_ref
ratio_of_paths <- sapply(1:number_of_paths, function(j) {
path <- ref_ontology[j, ]
if(!is.null(measured) & all(measured == path))  measured_index <- j
ratios <- sapply(1:number_of_labels, function(h) {
sum(nn_table[[list_of_nn_table_colnames[h]]] == path[[colnames(path)[h]]]) / number_of_k_neighbors
})
return(ratios)
})
return(list(ratio_of_paths, measured_index))
}
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
nn_table_to_matrix <- function(
ref_ontology,
nn_table,
number_of_labels,
measured = NULL
) {
list_of_nn_table_colnames <- colnames(nn_table)
number_of_paths <- nrow(ref_ontology)
number_of_k_neighbors <- nrow(nn_table)
measured_index <- 0
ratio_of_paths <- matrix(0, nrow=number_of_labels, ncol=number_of_paths)
#This chunk will calculate the ratio of paths for unique label in cds_ref
ratio_of_paths <- sapply(1:number_of_paths, function(j) {
path <- ref_ontology[j, ]
if(!is.null(measured) && all(measured == path))  measured_index <- j
ratios <- sapply(1:number_of_labels, function(h) {
sum(nn_table[[list_of_nn_table_colnames[h]]] == path[[colnames(path)[h]]]) / number_of_k_neighbors
})
return(ratios)
})
return(list(ratio_of_paths, measured_index))
}
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
nn_table_to_matrix <- function(
ref_ontology,
nn_table,
number_of_labels,
measured = NULL
) {
list_of_nn_table_colnames <- colnames(nn_table)
number_of_paths <- nrow(ref_ontology)
number_of_k_neighbors <- nrow(nn_table)
measured_index <- 0
ratio_of_paths <- matrix(0, nrow=number_of_labels, ncol=number_of_paths)
#This chunk will calculate the ratio of paths for unique label in cds_ref
ratio_of_paths <- sapply(1:number_of_paths, function(j) {
path <- ref_ontology[j, ]
if(!is.null(measured) & all(measured == path))  measured_index <- j
ratios <- sapply(1:number_of_labels, function(h) {
sum(nn_table[[list_of_nn_table_colnames[h]]] == path[[colnames(path)[h]]]) / number_of_k_neighbors
})
return(ratios)
})
return(list(ratio_of_paths, measured_index))
}
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labelsnn_table_to_matrix <- function(
ref_ontology,
nn_table,
number_of_labels
) {
list_of_nn_table_colnames <- colnames(nn_table)
number_of_paths <- nrow(ref_ontology)
number_of_k_neighbors <- nrow(nn_table)
ratio_of_paths <- matrix(0, nrow=number_of_labels, ncol=number_of_paths)
#This chunk will calculate the ratio of paths for unique label in cds_ref
ratio_of_paths <- sapply(1:number_of_paths, function(j) {
path <- ref_ontology[j, ]
ratios <- sapply(1:number_of_labels, function(h) {
sum(nn_table[[list_of_nn_table_colnames[h]]] == path[[colnames(path)[h]]]) / number_of_k_neighbors
})
return(ratios)
})
return(ratio_of_paths)
}); toc()
nn_table_to_matrix <- function(
ref_ontology,
nn_table,
number_of_labels
) {
list_of_nn_table_colnames <- colnames(nn_table)
number_of_paths <- nrow(ref_ontology)
number_of_k_neighbors <- nrow(nn_table)
ratio_of_paths <- matrix(0, nrow=number_of_labels, ncol=number_of_paths)
#This chunk will calculate the ratio of paths for unique label in cds_ref
ratio_of_paths <- sapply(1:number_of_paths, function(j) {
path <- ref_ontology[j, ]
ratios <- sapply(1:number_of_labels, function(h) {
sum(nn_table[[list_of_nn_table_colnames[h]]] == path[[colnames(path)[h]]]) / number_of_k_neighbors
})
return(ratios)
})
return(ratio_of_paths)
}
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
tic(); ratio_of_paths <- nn_table_to_matrix(ref_ontology, nn_table, number_of_labels); toc()
source("~/Desktop/sclass_local/temp.R")
tic(); a(ref_ontology_, nn_table, number_of_labels = number_of_labels) toc();
tic(); a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
source("~/Desktop/sclass_local/temp.R")
tic(); a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- a(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
tic(); x <- b(ref_ontology_, nn_table, number_of_labels = number_of_labels); toc();
source('load_data.R')
L()
plot_cells(cds_ref, color_cells_by = cell_type_sub)
colData(cds_ref)
plot_cells(cds_ref, color_cells_by = "cell_type_sub")
plot_cells(cds_ref, color_cells_by = "cell_type_sub")
plot_cells(cds_ref, color_cells_by = "cell_type_sub")
